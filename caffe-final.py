# -*- coding: utf-8 -*-
"""mount.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10MbTWK8das2Fnu6yn9Wfhs6HyGufcQeD
"""

!kill -9 -1

!apt-get update
!apt-get upgrade
!apt-get install <packagename>

!apt-get install -y -qq software-properties-common python-software-properties module-init-tools
!add-apt-repository -y ppa:alessandro-strada/ppa 2>&1 > /dev/null
!apt-get update -qq 2>&1 > /dev/null
!apt-get -y install -qq google-drive-ocamlfuse fuse
from google.colab import auth
auth.authenticate_user()
from oauth2client.client import GoogleCredentials
creds = GoogleCredentials.get_application_default()
import getpass
!google-drive-ocamlfuse -headless -id={creds.client_id} -secret={creds.client_secret} < /dev/null 2>&1 | grep URL
vcode = getpass.getpass()
!echo {vcode} | google-drive-ocamlfuse -headless -id={creds.client_id} -secret={creds.client_secret}

"""## Step 2:  Setting working directory"""

## Mount google drive 

!mkdir -p drive 
!google-drive-ocamlfuse drive

import os
os.chdir("drive/caffe-laiyi")

!apt install -y caffe-cuda

import glob
def get_data(basedir):
    images = os.listdir(basedir)
    pictures = []
    count = 0
    for imtype in images:
        pictures.extend(glob.glob(basedir + imtype))
        #count += 1
        #if count%100 == 0:
          #print(count)
    return pictures

train = get_data('pictures/')
#print(len(train))
print(train)
print(len(train))

import pandas as pd
df_test = pd.read_csv('picture-ad/test-ad.csv')

df_test_filter = df_test[0:1000]
df_test_filter[0:2]

print(df_test_filter.shape)

import caffe

import os
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline

mean_filename='AgeGenderDeepLearning/models/mean.binaryproto'
proto_data = open(mean_filename, "rb").read()
a = caffe.io.caffe_pb2.BlobProto.FromString(proto_data)
mean  = caffe.io.blobproto_to_array(a)[0]

# age_net_pretrained='AgeGenderDeepLearning/models/age_net.caffemodel'
# age_net_model_file='AgeGenderDeepLearning/age_net_definitions/deploy.prototxt'
age_net_pretrained='wiki-model/dex_imdb_wiki.caffemodel'
age_net_model_file='wiki-model/deploy.prototxt'
age_net = caffe.Classifier(age_net_model_file, age_net_pretrained,
                       mean = mean,
                       channel_swap = (2,1,0),
                       raw_scale = 255,
                       image_dims=(256, 256))

age_list=['(0, 2)','(4, 6)','(8, 12)','(15, 20)','(25, 32)','(38, 43)','(48, 53)','(60, 100)']

age_int_list  = [[0, 13],[13, 20],[20, 32],[32, 43],[43, 53],[53, 100]]
age_ini_list1 = [[0, 12],[15, 20],[25, 32],[38, 43],[48, 53],[60, 100]]

def getAgeIndex1(ageIndex):
  if ageIndex <= 2:
    return 0
  if ageIndex == 3:
    return 1
  if ageIndex == 4:
    return 2
  if ageIndex == 5:
    return 3
  if ageIndex == 6:
    return 4
  if ageIndex == 7:
    return 5

def getRealAge(example_image):
  #print(example_image[17:21])
  #print(example_image[29:33])
  first  = example_image.find('_')
  birthday = example_image[first+1:first+5]
  second = example_image.find('_', first+5)
  picture_taken = example_image[second+1: second+5]
  return int(picture_taken) - int(birthday)

getRealAge(train[0])

def getAgeIndex(age):
  if age <=  14:
    return 0
  if age > 14 and age <= 22:
    return 1
  if age > 22 and age <= 35:
    return 2
  if age > 35 and age <= 45:
    return 3
  if age > 45 and age <= 55:
    return 4
  if age > 55:
    return 5

# Using gil's model to predict ad:
age_net_pretrained='AgeGenderDeepLearning/models/age_net.caffemodel'
age_net_model_file='AgeGenderDeepLearning/age_net_definitions/deploy.prototxt'
# age_net_pretrained='wiki-model/dex_imdb_wiki.caffemodel'
# age_net_model_file='wiki-model/deploy.prototxt'
age_net = caffe.Classifier(age_net_model_file, age_net_pretrained,
                       mean = mean,
                       channel_swap = (2,1,0),
                       raw_scale = 255,
                       image_dims=(256, 256))

from skimage import io; io.use_plugin('matplotlib')
import numpy as np
correct = np.zeros(6)
total   = np.zeros(6)
times = 0
for index in range(0, len(df_test_filter)):
  
  if times%200 == 0:
    print(times)
  times += 1
  
  #predict part:
  example_image = df_test_filter.loc[index]['path']
  input_image = caffe.io.load_image(example_image)
  prediction = age_net.predict([input_image])
  
  real_age_index = df_test_filter.loc[index]['group']
  prediction_age = prediction[0].argmax()
  prediction_age_index = getAgeIndex1(prediction_age)
  total[real_age_index] += 1
  if real_age_index == prediction_age_index:
    correct[real_age_index] += 1

#   print ('predicted age:', prediction_age)
#   print ('real age:', real_age_index)
#   print()

print(correct) 
print(total)

# Using r's model to predict ad:
# age_net_pretrained='AgeGenderDeepLearning/models/age_net.caffemodel'
# age_net_model_file='AgeGenderDeepLearning/age_net_definitions/deploy.prototxt'
age_net_pretrained='wiki-model/dex_imdb_wiki.caffemodel'
age_net_model_file='wiki-model/deploy.prototxt'
age_net = caffe.Classifier(age_net_model_file, age_net_pretrained,
                       mean = mean,
                       channel_swap = (2,1,0),
                       raw_scale = 255,
                       image_dims=(256, 256))

#Using r's model for ad

from skimage import io; io.use_plugin('matplotlib')
import numpy as np
correct = np.zeros(6)
total   = np.zeros(6)
times = 0

for index in range(0, 200):
  
  if times%50 == 0:
    print(times)
  times += 1
  
  #predict part:
  example_image = df_test_filter.loc[index]['path']
  input_image = caffe.io.load_image(example_image)
  prediction = age_net.predict([input_image])
  real_age_index = df_test_filter.loc[index]['group']
  print(real_age_index)
  prediction_age = prediction[0].argmax()
  prediction_age_index = getAgeIndex(prediction_age)
   
  total[real_age_index] += 1
  if real_age_index == prediction_age_index:
    correct[real_age_index] += 1

#   print ('predicted age:', prediction_age)
#   print ('real age:', real_age_index)
#   print()

print(correct)
print(total)

# Using gil's model to predict IMBD-wiki dataset:
age_net_pretrained='AgeGenderDeepLearning/models/age_net.caffemodel'
age_net_model_file='AgeGenderDeepLearning/age_net_definitions/deploy.prototxt'
# age_net_pretrained='wiki-model/dex_imdb_wiki.caffemodel'
# age_net_model_file='wiki-model/deploy.prototxt'
age_net = caffe.Classifier(age_net_model_file, age_net_pretrained,
                       mean = mean,
                       channel_swap = (2,1,0),
                       raw_scale = 255,
                       image_dims=(256, 256))

from skimage import io; io.use_plugin('matplotlib')
import numpy as np

correct = np.zeros(6)
total   = np.zeros(6)
times = 0

for index in range(0, len(train)):
  
  if times%100 == 0:
    print(times)
  times += 1
  
  example_image = train[index]
  input_image = caffe.io.load_image(example_image)
  prediction = age_net.predict([input_image])
  
  real_age       = getRealAge(example_image)
  real_age_index = getAgeIndex(real_age)
  
  prediction_age_index = getAgeIndex1(prediction[0].argmax())
  
  if real_age < 0 or real_age > 100:
    continue
 
  total[real_age_index] += 1
  if real_age_index == prediction_age_index:
    correct[real_age_index] += 1

#   print ('predicted age:', prediction_age_index)
#   print (example_image)
#   print ('real age:', real_age_index, real_age)
#   print ()

print(correct)
print(total)

print(correct)
print(total)

#Using Rasmus's model to predict the IMDB-model

# age_net_pretrained='AgeGenderDeepLearning/models/age_net.caffemodel'
# age_net_model_file='AgeGenderDeepLearning/age_net_definitions/deploy.prototxt'
age_net_pretrained='wiki-model/dex_imdb_wiki.caffemodel'
age_net_model_file='wiki-model/deploy.prototxt'
age_net = caffe.Classifier(age_net_model_file, age_net_pretrained,
                       mean = mean,
                       channel_swap = (2,1,0),
                       raw_scale = 255,
                       image_dims=(256, 256))

from skimage import io; io.use_plugin('matplotlib')
import numpy as np

correct = np.zeros(6)
total   = np.zeros(6)
times = 0

for index in range(0, 500):
  if times%10 == 0:
    print(times)
  times += 1
  
  example_image = train[index]
  input_image = caffe.io.load_image(example_image)
  prediction = age_net.predict([input_image])
  
  real_age       = getRealAge(example_image)
  real_age_index = getAgeIndex(real_age)
  
  prediction_age       = prediction[0].argmax()
  prediction_age_index = getAgeIndex(prediction_age)
  
  if real_age < 0 or real_age > 100:
    continue
 
  current = prediction[0].argmax()
  total[real_age_index] += 1
  if real_age_index == prediction_age_index:
    correct[real_age_index] += 1
  
  #print ('predicted age:', prediction_age)
  #print (example_image)
  #print ('real age:',getRealAge(example_image))

print(correct)
print(total)